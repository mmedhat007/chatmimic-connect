---
description: 
globs: 
alwaysApply: true
---

# Your rule content

# ChatMimic Connect - Project Intelligence

This file serves as Cursor's learning journal, capturing key insights and project-specific intelligence.

## Core Project Requirements and Goals

- Create and manage AI-powered WhatsApp chatbots for businesses
- Enable businesses to configure chatbots with custom behavior rules
- Integrate with Google Sheets for contact and data management
- Provide analytics and monitoring capabilities

## System Architecture

- Frontend: React with TypeScript and Vite
- Backend: Node.js with Express
- Authentication: Firebase Authentication
- Database: Supabase (PostgreSQL) and Firebase Firestore
- AI Integration: Groq, OpenAI for embeddings and LLM capabilities
- Storage: Firebase Storage for user files

## API Specifications

### Key Endpoints:
- `/api/proxy/:service/*`: Routes for secure proxy operations to external services
- `/api/embeddings`: Generate embeddings for text
- `/api/google/sheets`: Google Sheets integration endpoints
- `/api/config`: User configuration management

### Authentication:
- All API endpoints require Firebase Authentication tokens
- Bearer token format for all authentication headers

## Security Configurations

- Content Security Policy implemented in NGINX
- Firebase Authentication for user management
- Authorization middleware for all API endpoints
- Secure credential management for third-party services

## Integrations

### Google Sheets Integration:
- OAuth2 authentication flow
- Support for creating, reading, and updating sheets
- Access token management with automatic refresh

### Vector Store:
- Embeddings generation and storage
- Document similarity matching

## Deployment Procedures

- NGINX configuration for frontend and API
- SSL certificate management with Let's Encrypt
- Health check endpoint at `/api/health`
- Environment variables management


## Known Issues and Troubleshooting

- SSL certificate validation errors when accessing API directly
- Google API authorization token refresh handling
- Firebase Admin SDK initialization error handling
// NOTE: Specific issue details moved to project_documentation/7-troubleshooting/common_issues.md

## Project-Specific Patterns

- API request proxying for external services
- Bearer token standardization for authorization headers
- Consistent error handling and logging patterns
- Google API credential management
- **Behavior Rules Save Separation**: Behavior Rules tab has its own save mechanism (`AgentBehaviorRules.tsx` -> `updateBehaviorRules` service) to prevent unnecessary embedding updates. Main config save excludes `behavior_rules`.
- **Regular Documentation Updates**: Regularly update project documentation (`project_documentation/` folder, `API_ENDPOINTS.md`, etc.) to reflect significant changes, fixes, and learned patterns.
- **Server Startup Debugging Process**: When encountering server startup crashes (esp. systemd restart loops):
    1. Check systemd logs (`journalctl`).
    2. If logs are unhelpful, attempt manual execution (`node index.js`) as the service user with exported env vars.
    3. If still unclear, add granular `console.log` statements around `require` calls and initialization code, starting from `index.js` and moving into required modules until the crashing line is found.
    4. Common culprits: Missing dependencies (`npm install --save <pkg>`), incorrect file paths (`path.resolve`), env var loading order (`dotenv` at top), module initialization errors.















.