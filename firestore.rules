rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if user is accessing their own data
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Helper function to check if user is an admin
    // Uses role-based access control instead of hardcoded UID
    function isAdmin() {
      return isAuthenticated() && exists(/databases/$(database)/documents/Roles/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/Roles/$(request.auth.uid)).data.role == 'admin';
    }

    // Roles collection - only admins can modify roles
    match /Roles/{userId} {
      allow read: if isAuthenticated() && (isOwner(userId) || isAdmin());
      allow write: if isAdmin();
    }

    // Users collection rules
    match /Users/{userId} {
      // Allow read and write if user is admin or accessing their own document
      allow read, write: if isAuthenticated() && (isOwner(userId) || isAdmin());
      
      // Allow access to workflows subcollection
      match /workflows/{workflowId} {
        allow read, write: if isAuthenticated() && (isOwner(userId) || isAdmin());
      }
    }

    // Admin can list users, but with certain restrictions
    match /Users/{userId} {
      allow list: if isAuthenticated() && isAdmin() && 
                    // Limit fields that can be listed to prevent data leakage
                    request.query.limit <= 100;
    }

    // Whatsapp_Data collection rules
    match /Whatsapp_Data/{userId} {
      // Allow read and write if user is admin or accessing their own document
      allow read, write: if isAuthenticated() && (isOwner(userId) || isAdmin());
      
      // Chats subcollection
      match /chats/{phoneNumber} {
        allow read, write: if isAuthenticated() && (isOwner(userId) || isAdmin());
        
        // Messages subcollection
        match /messages/{messageId} {
          allow read, write: if isAuthenticated() && (isOwner(userId) || isAdmin());
        }
      }
      
      // Templates subcollection
      match /templates/{templateId} {
        allow read, write: if isAuthenticated() && (isOwner(userId) || isAdmin());
      }
    }

    // Collection group query rule for messages - more restrictive to prevent excessive reads
    match /{document=**}/messages/{messageId} {
      allow read: if isAuthenticated() && (
        isOwner(request.path[3]) || // Checks if user owns the parent Whatsapp_Data document
        isAdmin()
      ) && request.query.limit <= 500; // Prevent excessively large queries
    }

    // Deny access to all other paths by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 