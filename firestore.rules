rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if user is accessing their own data
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Helper function to check if user is an admin
    function isAdmin() {
      return request.auth.uid == "0ThUjgEGmeTyM9jaUcMgreDJKNa2";
    }

    // Users collection rules
    match /Users/{userId} {
      // Allow read and write if user is admin or accessing their own document
      allow read, write: if isAuthenticated() && (isOwner(userId) || isAdmin());
    }

    // Whatsapp_Data collection rules
    match /Whatsapp_Data/{userId} {
      // Allow read and write if user is admin or accessing their own document
      allow read, write: if isAuthenticated() && (isOwner(userId) || isAdmin());
      
      // Chats subcollection
      match /chats/{phoneNumber} {
        allow read, write: if isAuthenticated() && (isOwner(userId) || isAdmin());
        
        // Messages subcollection
        match /messages/{messageId} {
          allow read, write: if isAuthenticated() && (isOwner(userId) || isAdmin());
        }
      }
    }

    // Collection group query rule for messages
    match /{document=**}/messages/{messageId} {
      allow read: if isAuthenticated() && (
        isOwner(request.path[3]) || // Checks if user owns the parent Whatsapp_Data document
        isAdmin()
      );
    }

    // Deny access to all other paths by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 