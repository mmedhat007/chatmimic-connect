rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if user is accessing their own data
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Helper function to validate workflow fields
    function hasValidWorkflowFields(workflow) {
      return workflow.limit is number 
        && workflow.executions_used is number 
        && workflow.reset_date is string;
    }

    // Rules for Users collection
    match /Users/{userId} {
      // Allow read/write only if the authenticated user's UID matches the document ID
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // No need to specify nested rules for maps (workflows) since they're part of the document
    }

    // Rules for Whatsapp_Data collection
    match /Whatsapp_Data/{userId} {
      // Allow read/write only if the authenticated user's UID matches the document ID
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // Rules for nested chats collection
      match /chats/{phoneNumber} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
        
        // Rules for nested messages collection
        match /messages/{messageId} {
          allow read, write: if request.auth != null && request.auth.uid == userId;
        }
      }
    }

    // For the messages index (collection group query)
    match /{path=**}/messages/{messageId} {
      // Allow reading messages if they are under the user's Whatsapp_Data path
      allow read: if request.auth != null && 
                    path[0] == 'Whatsapp_Data' && 
                    path[1] == request.auth.uid;
    }

    // Deny access to all other paths by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 